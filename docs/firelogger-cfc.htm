<html>
	<head>
		<title>Component firelogger</title>
		<style>
			body {
				font-family: verdana, arial, helvetica, sans-serif;
				background-color: #FFFFFF;
				font-size: 12px;
				margin-top: 10px;
				margin-left: 10px;
			}
			
			table {
				font-size: 11px;
				font-family: Verdana, arial, helvetica, sans-serif;
				width: 90%;
			}
			
			th {
				padding: 6px;
				font-size: 12px;
				background-color: #cccccc;
			}
			
			td {
				padding: 6px;
				background-color: #eeeeee;
				vertical-align: top;
			}
			
			code {
				color: #000099;
			}
		</style>
	</head>
	<body style="padding-bottom : 800px;">
		<font size="-2">us.wdg.cf.firelogger</font>
		<br>
		<font size="+1">
			<b>Component firelogger (CF-FireLogger)</b>
		</font>
		<br>
		<br>
		<br>
		<table>
			<tr>
			<td>hierarchy:</td>
			<td>
				<a href="/CFIDE/componentutils/cfcexplorer.cfc?method=getcfcinhtml&name=WEB-INF.cftags.component">WEB-INF.cftags.component</a>
				<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Firelogger.us.wdg.cf.firelogger
				<br> </td>
			</tr>
			<tr>
			<td>path:</td>
			<td>\us\wdg\cf\firelogger.cfc</td>
			</tr>
			<tr>
			<td>serializable:</td>
			<td>Yes</td>
			</tr>
			<p>This component handles server-side output for the FireLogger (http://firelogger.binaryage.com) Firebug plugin.</p>
			<tr>
			<td>properties:</td>
			<br>
			<td>
				<a href="#property_debugLevel">debugLevel</a>, <a href="#property_debugMode">debugMode</a>, <a href="#property_debugTraceInline">debugTraceInline</a>, <a href="#property_fallbackLogMethod">fallbackLogMethod</a>, <a href="#property_filename">filename</a>, <a href="#property_isConsoleEnabled">isConsoleEnabled</a>, <a href="#property_lineno">lineno</a>, <a href="#property_loggerBGColor">loggerBGColor</a>, <a href="#property_loggerFGColor">loggerFGColor</a>, <a href="#property_loggerName">loggerName</a>, <a href="#property_maxEncodeDepth">maxEncodeDepth</a>, <a href="#property_maxHeaderLength">maxHeaderLength</a>, <a href="#property_obj">obj</a>, <a href="#property_password">password</a>, <a href="#property_text">text</a>, <a href="#property_type">type</a>, <a href="#property_valuesAlreadySerialized">valuesAlreadySerialized</a>, <a href="#property_version">version</a>
			</td>
			</tr>
			<tr>
			<td>methods:</td>
			<td>
				<a href="#method_buildHeaders">buildHeaders</a>*, <a href="#method_clientVersionCheck">clientVersionCheck</a>*, <a href="#method_critical">critical</a>, <a href="#method_doLog">doLog</a>*, <a href="#method_encodeJSON">encodeJSON</a>, <a href="#method_err">err</a>, <a href="#method_error">error</a>, <a href="#method_fireloggerPasswordCheck">fireloggerPasswordCheck</a>*, <a href="#method_formatErrorOutput">formatErrorOutput</a>, <a href="#method_getCallerFileLine">getCallerFileLine</a>*, <a href="#method_GETDEBUGLEVEL">GETDEBUGLEVEL</a>, <a href="#method_GETDEBUGMODE">GETDEBUGMODE</a>, <a href="#method_GETDEBUGTRACEINLINE">GETDEBUGTRACEINLINE</a>, <a href="#method_GETFALLBACKLOGMETHOD">GETFALLBACKLOGMETHOD</a>, <a href="#method_GETISCONSOLEENABLED">GETISCONSOLEENABLED</a>, <a href="#method_GETLOGGERBGCOLOR">GETLOGGERBGCOLOR</a>, <a href="#method_GETLOGGERFGCOLOR">GETLOGGERFGCOLOR</a>, <a href="#method_GETLOGGERNAME">GETLOGGERNAME</a>, <a href="#method_GETOBJ">GETOBJ</a>, <a href="#method_getParameters">getParameters</a>*, <a href="#method_GETTEXT">GETTEXT</a>, <a href="#method_GETTYPE">GETTYPE</a>, <a href="#method_GETVERSION">GETVERSION</a>, <a href="#method_info">info</a>, <a href="#method_init">init</a>, <a href="#method_log">log</a>, <a href="#method_logProxy">logProxy</a>*, <a href="#method_panic">panic</a>*, <a href="#method_resetLoggerBadge">resetLoggerBadge</a>, <a href="#method_sendHeaders">sendHeaders</a>*, <a href="#method_SETDEBUGLEVEL">SETDEBUGLEVEL</a>, <a href="#method_SETDEBUGMODE">SETDEBUGMODE</a>, <a href="#method_SETDEBUGTRACEINLINE">SETDEBUGTRACEINLINE</a>, <a href="#method_SETFALLBACKLOGMETHOD">SETFALLBACKLOGMETHOD</a>, <a href="#method_SETFILENAME">SETFILENAME</a>, <a href="#method_setIsConsoleEnabled">setIsConsoleEnabled</a>*, <a href="#method_SETLINENO">SETLINENO</a>, <a href="#method_SETLOGGERBGCOLOR">SETLOGGERBGCOLOR</a>, <a href="#method_SETLOGGERFGCOLOR">SETLOGGERFGCOLOR</a>, <a href="#method_SETLOGGERNAME">SETLOGGERNAME</a>, <a href="#method_SETMAXENCODEDEPTH">SETMAXENCODEDEPTH</a>, <a href="#method_SETMAXHEADERLENGTH">SETMAXHEADERLENGTH</a>, <a href="#method_SETOBJ">SETOBJ</a>, <a href="#method_setParameters">setParameters</a>*, <a href="#method_setPassword">setPassword</a>, <a href="#method_SETTEXT">SETTEXT</a>, <a href="#method_SETTYPE">SETTYPE</a>, <a href="#method_SETVALUESALREADYSERIALIZED">SETVALUESALREADYSERIALIZED</a>, <a href="#method_splitStrToArray">splitStrToArray</a>*, <a href="#method_typeFL2CF">typeFL2CF</a>*, <a href="#method_warn">warn</a>
			</td>
			</tr>
		</table>
		<font size="-2">* - private method</font>
		<br>
		<br>
		<table>
			<tr>
			<th>Property</th>
			<th>Hint</th>
			<th>Type</th>
			<th>Req.</th>
			<th>Implemented In</th>
			<th>Default Value</th>
			<th>Serializable</th>
			</tr>
			<tr>
			<td>
				<a name="property_debugLevel"><b>debugLevel</b></a>
			</td>
			<td>One of: panic : show only erros that can't be sent via headers; 
				error : dump all errors; info: show debug info.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> panic </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_debugMode"><b>debugMode</b></a>
			</td>
			<td>Set to true to enable CF FireLogger debugging.</td>
			<td> boolean </td>
			<td></td>
			<td>firelogger</td>
			<td> false </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_debugTraceInline"><b>debugTraceInline</b></a>
			</td>
			<td>Set to true to trace debug info to current page, false to trace to debug info/log file.</td>
			<td> boolean </td>
			<td></td>
			<td>firelogger</td>
			<td> true </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_fallbackLogMethod"><b>fallbackLogMethod</b></a>
			</td>
			<td>How to handle logging if FireLogger is unable to. One of: trace-inline, trace, dump, none.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> trace-inline </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_filename"><b>filename</b></a>
			</td>
			<td>Path/name of file containig log() directive. Typically set by this component, 
				but this setting can override it.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_isConsoleEnabled"><b>isConsoleEnabled</b></a>
			</td>
			<td>Is true if Firebug/FireLogger console is enabled (read-only).</td>
			<td> boolean </td>
			<td></td>
			<td>firelogger</td>
			<td> false </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_lineno"><b>lineno</b></a>
			</td>
			<td>Line number log call was made from. Typically set by this component, 
				but this setting can override it.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> ? </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_loggerBGColor"><b>loggerBGColor</b></a>
			</td>
			<td>Background color for badge/label, any css color value.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> #315F81 </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_loggerFGColor"><b>loggerFGColor</b></a>
			</td>
			<td>Foreground (text) color for badge/label, any css color value.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> #FFFFFF </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_loggerName"><b>loggerName</b></a>
			</td>
			<td>A title for the badge/label on the right of each console logline in FireLogger.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> CF </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_maxEncodeDepth"><b>maxEncodeDepth</b></a>
			</td>
			<td>Maximum recursion for serializing complex values.</td>
			<td> numeric </td>
			<td></td>
			<td>firelogger</td>
			<td> 30 </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_maxHeaderLength"><b>maxHeaderLength</b></a>
			</td>
			<td>Maximum length of each response header line (bytes).</td>
			<td> numeric </td>
			<td></td>
			<td>firelogger</td>
			<td> 5000 </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_obj"><b>obj</b></a>
			</td>
			<td>The variable to be evaluated and logged. Can be any type of value, 
				including complex types such as structures and objects. Undefined by default</td>
			<td> any </td>
			<td></td>
			<td>firelogger</td>
			<td>-</td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_password"><b>password</b></a>
			</td>
			<td>FireLogger password, if one is being used (blank if not). Use setPassword('pass') to set.
				Or during init(password='pass').</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_text"><b>text</b></a>
			</td>
			<td>The plain-text message to be logged.</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_type"><b>type</b></a>
			</td>
			<td>The message type. Can be one of: debug, info, warning, error, exception</td>
			<td> string </td>
			<td></td>
			<td>firelogger</td>
			<td> debug </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_valuesAlreadySerialized"><b>valuesAlreadySerialized</b></a>
			</td>
			<td>Set this to true if complex data being logged is already valid JSON. 
				Saves time evaluating if it needs to be serialized.</td>
			<td> boolean </td>
			<td></td>
			<td>firelogger</td>
			<td> false </td>
			<td>Yes</td>
			</tr>
			<tr>
			<td>
				<a name="property_version"><b>version</b></a>
			</td>
			<td>CF FireLogger version number (read-only).</td>
			<td> numeric </td>
			<td></td>
			<td>firelogger</td>
			<td>-</td>
			<td>Yes</td>
			</tr>
		</table>
		<br>
		<br>
		<table>
			<tr>
			<th align="left" colspan="1">
				<a name="method_buildHeaders">buildHeaders</a>* 
			</th>
			</tr>
			<tr>
			<td>
				<code>
				<i>private</i>
				<i>void</i>
				<b>buildHeaders</b>
				(<i> array</i>
				data, <i> string</i>
				format="firelogger" 
				)</i>
			</code>
			<br>
			<br>
			Builds variables.headers structure of headername:value pairs for the logging output based on the passed-in array of data strings.
			<br>
			<br>
			Output: suppressed
			<br>
			Parameters:
			<br>
			&nbsp;&nbsp; <b>data:</b>
			array, optional, data 
			<br>
			&nbsp;&nbsp; <b>format:</b>
			string, optional, format 
			<br>
			<br></td>
		</tr>
		<tr>
		<th align="left" colspan="1">
			<a name="method_clientVersionCheck">clientVersionCheck</a>* 
		</th>
		</tr>
		<tr>
		<td>
			<code>
			<i>private</i>
			<i>void</i>
			<b>clientVersionCheck</b>
			(
			)</i>
		</code>
		<br>
		<br>
		Check console logger version against expected version and output warning in the response headers if mismatch.
		<br>
		<br>
		Output: suppressed
		<br>
		<br></td>
	</tr>
	<tr>
	<th align="left" colspan="1">
		<a name="method_critical">critical</a>
	</th>
	</tr>
	<tr>
	<td>
		<code>
		<i>public</i>
		<i>boolean</i>
		<b>critical</b>
		(
		)</i>
	</code>
	<br>
	<br>
	critical type proxy function for log() See docs for log().
	<br>
	<br>
	Output: 
	<br>
	<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_doLog">doLog</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>boolean</i>
	<b>doLog</b>
	(
	)</i>
</code>
<br>
<br>
this is actually the main logging function... but "log()" is also a built-in CF function name, so we don't really want to use it as then we have to call this.log() internally which "pollutes" the tag call stack.  (output: true because we might have to dump output to the browser in case a fallback method is necessary.  Would be nice if this could be dynamic based on the debug variable.)
<br>
<br>
Output: enabled
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_encodeJSON">encodeJSON</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>encodeJSON</b>
	(<i> required any</i>
	data, <i> numeric</i>
	encodeDepth="0", <i> boolean</i>
	stringNumbers="false", <i> boolean</i>
	formatDates="true", <i> string</i>
	skipKeys="", <i> boolean</i>
	skipKeysRecursive="false", <i> boolean</i>
	preserveArrays="false", <i> numeric</i>
	preserveArraysRecurseLevels="2" 
	)</i>
</code>
<br>
<br>
Converts data from CF to structured JSON format.
<br>
<br>
Output: enabled
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>data:</b>
any, required, data 
<br>
&nbsp;&nbsp; <b>encodeDepth:</b>
numeric, optional, encodeDepth 
<br>
&nbsp;&nbsp; <b>stringNumbers:</b>
boolean, optional, stringNumbers 
<br>
&nbsp;&nbsp; <b>formatDates:</b>
boolean, optional, formatDates 
<br>
&nbsp;&nbsp; <b>skipKeys:</b>
string, optional, skipKeys 
<br>
&nbsp;&nbsp; <b>skipKeysRecursive:</b>
boolean, optional, skipKeysRecursive 
<br>
&nbsp;&nbsp; <b>preserveArrays:</b>
boolean, optional, preserveArrays 
<br>
&nbsp;&nbsp; <b>preserveArraysRecurseLevels:</b>
numeric, optional, preserveArraysRecurseLevels 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_err">err</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>err</b>
	(<i></i>
	msg, <i></i>
	e="[runtime expression]" 
	)</i>
</code>
<br>
<br>
Error handler for "soft" errors. Can be used to return a special error type header to FireLogger console which shows up at the top with a red background and expands to show a stack trace.  Public becaues frelogger.cfm debug template can also use this.
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>msg:</b>
any, optional, msg - plain text message to log
<br>
&nbsp;&nbsp; <b>e:</b>
any, optional, e - error object (result of catch)
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_error">error</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>error</b>
	(
	)</i>
</code>
<br>
<br>
error type proxy function for log() See docs for log().
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_fireloggerPasswordCheck">fireloggerPasswordCheck</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>boolean</i>
	<b>fireloggerPasswordCheck</b>
	(
	)</i>
</code>
<br>
<br>
Returns true/false based on if password is required and, if it is, if it matches the one set in the http headers.
<br>
<br>
Output: suppressed
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_formatErrorOutput">formatErrorOutput</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>struct</i>
	<b>formatErrorOutput</b>
	(<i></i>
	text="", <i></i>
	e="[runtime expression]" 
	)</i>
</code>
<br>
<br>
Formats the result of an error object (cfcatch). Returns a structure with 4 members. text: is the full message to log. exc_info: is an array in the proper format for FireLogger stack trace output. filename: the file with the error (first file in stack trace) lineno: the line number the actual error occured in (from first entry in stack trace)
<br>
<br>
Output: suppressed
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>text:</b>
any, optional, text 
<br>
&nbsp;&nbsp; <b>e:</b>
any, optional, e 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_getCallerFileLine">getCallerFileLine</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>array</i>
	<b>getCallerFileLine</b>
	(
	)</i>
</code>
<br>
<br>
Gets the calling template and line number from current stack trace,
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETDEBUGLEVEL">GETDEBUGLEVEL</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETDEBUGLEVEL</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETDEBUGMODE">GETDEBUGMODE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>GETDEBUGMODE</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETDEBUGTRACEINLINE">GETDEBUGTRACEINLINE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>GETDEBUGTRACEINLINE</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETFALLBACKLOGMETHOD">GETFALLBACKLOGMETHOD</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETFALLBACKLOGMETHOD</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETISCONSOLEENABLED">GETISCONSOLEENABLED</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>GETISCONSOLEENABLED</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETLOGGERBGCOLOR">GETLOGGERBGCOLOR</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETLOGGERBGCOLOR</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETLOGGERFGCOLOR">GETLOGGERFGCOLOR</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETLOGGERFGCOLOR</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETLOGGERNAME">GETLOGGERNAME</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETLOGGERNAME</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETOBJ">GETOBJ</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>any</i>
	<b>GETOBJ</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_getParameters">getParameters</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>struct</i>
	<b>getParameters</b>
	(
	)</i>
</code>
<br>
<br>
Gets current settable properties from variables scope and returns them as a new structure
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETTEXT">GETTEXT</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETTEXT</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETTYPE">GETTYPE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>string</i>
	<b>GETTYPE</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_GETVERSION">GETVERSION</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>numeric</i>
	<b>GETVERSION</b>
	(
	)</i>
</code>
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_info">info</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>info</b>
	(
	)</i>
</code>
<br>
<br>
info type proxy function for log() See docs for log().
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_init">init</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>any</i>
	<b>init</b>
	(
	)</i>
</code>
<br>
<br>
Initialization routine. Returns an instance of this component. Specify any properties to set as named arguments. Example: logger = new firelogger(password='pass', debugMode=true);
<br>
<br>
Output: suppressed
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_log">log</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>log</b>
	(
	)</i>
</code>
<br>
<br>
Log a record to the console.  Usage: log([level,] [message,] [object] [, object]...) Where: level = one of: debug (default), warning, info, error, critical. message = text to log; may contain simple-value variables. object = one or more values to log, of any type.  note: at least one of a message or object is required, otherwise function exits w/out doing anything.   Any arguments passed to this method are do not override the component-wide default.  For example, setting the log type here does not change the default log type. Default log type can be set with setType("type");
<br>
<br>
Output: 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_logProxy">logProxy</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>boolean</i>
	<b>logProxy</b>
	(<i> string</i>
	type="", <i> required struct</i>
	args 
	)</i>
</code>
<br>
<br>
used by doLog() "proxy" functions warn(), info(), error(), critical()
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>type:</b>
string, optional, type 
<br>
&nbsp;&nbsp; <b>args:</b>
struct, required, args 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_panic">panic</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>void</i>
	<b>panic</b>
	(<i></i>
	msg, <i></i>
	e="[runtime expression]" 
	)</i>
</code>
<br>
<br>
Handle errors where we can't set a header in response, eg. after output has been flushed or if we die while building the output.  Tries to log the original request to the fallback handler (eg. trace or writedump).
<br>
<br>
Output: enabled
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>msg:</b>
any, optional, msg - plain text message to log
<br>
&nbsp;&nbsp; <b>e:</b>
any, optional, e - error object (result of catch)
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_resetLoggerBadge">resetLoggerBadge</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>resetLoggerBadge</b>
	(<i> boolean</i>
	resetName="true", <i> boolean</i>
	resetColors="true" 
	)</i>
</code>
<br>
<br>
Sets the "badge" settings to default. The badge is the colored label that appears on the right of each logged line in FireLogger.
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>resetName:</b>
boolean, optional, resetName 
<br>
&nbsp;&nbsp; <b>resetColors:</b>
boolean, optional, resetColors 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_sendHeaders">sendHeaders</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>void</i>
	<b>sendHeaders</b>
	(
	)</i>
</code>
<br>
<br>
Sets http headers with the logging output for use by the console.
<br>
<br>
Output: suppressed
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETDEBUGLEVEL">SETDEBUGLEVEL</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETDEBUGLEVEL</b>
	(<i> required string</i>
	debugLevel 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>debugLevel:</b>
string, required, debugLevel 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETDEBUGMODE">SETDEBUGMODE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETDEBUGMODE</b>
	(<i> required boolean</i>
	debugMode 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>debugMode:</b>
boolean, required, debugMode 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETDEBUGTRACEINLINE">SETDEBUGTRACEINLINE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETDEBUGTRACEINLINE</b>
	(<i> required boolean</i>
	debugTraceInline 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>debugTraceInline:</b>
boolean, required, debugTraceInline 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETFALLBACKLOGMETHOD">SETFALLBACKLOGMETHOD</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETFALLBACKLOGMETHOD</b>
	(<i> required string</i>
	fallbackLogMethod 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>fallbackLogMethod:</b>
string, required, fallbackLogMethod 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETFILENAME">SETFILENAME</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETFILENAME</b>
	(<i> required string</i>
	filename 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>filename:</b>
string, required, filename 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_setIsConsoleEnabled">setIsConsoleEnabled</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>boolean</i>
	<b>setIsConsoleEnabled</b>
	(
	)</i>
</code>
<br>
<br>
Overall check to see if browser console is enabled
<br>
<br>
Output: suppressed
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETLINENO">SETLINENO</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETLINENO</b>
	(<i> required string</i>
	lineno 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>lineno:</b>
string, required, lineno 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETLOGGERBGCOLOR">SETLOGGERBGCOLOR</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETLOGGERBGCOLOR</b>
	(<i> required string</i>
	loggerBGColor 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>loggerBGColor:</b>
string, required, loggerBGColor 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETLOGGERFGCOLOR">SETLOGGERFGCOLOR</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETLOGGERFGCOLOR</b>
	(<i> required string</i>
	loggerFGColor 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>loggerFGColor:</b>
string, required, loggerFGColor 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETLOGGERNAME">SETLOGGERNAME</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETLOGGERNAME</b>
	(<i> required string</i>
	loggerName 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>loggerName:</b>
string, required, loggerName 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETMAXENCODEDEPTH">SETMAXENCODEDEPTH</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETMAXENCODEDEPTH</b>
	(<i> required numeric</i>
	maxEncodeDepth 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>maxEncodeDepth:</b>
numeric, required, maxEncodeDepth 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETMAXHEADERLENGTH">SETMAXHEADERLENGTH</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETMAXHEADERLENGTH</b>
	(<i> required numeric</i>
	maxHeaderLength 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>maxHeaderLength:</b>
numeric, required, maxHeaderLength 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETOBJ">SETOBJ</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETOBJ</b>
	(<i> required any</i>
	obj 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>obj:</b>
any, required, obj 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_setParameters">setParameters</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>void</i>
	<b>setParameters</b>
	(<i> struct</i>
	args, <i> struct</i>
	target="[runtime expression]" 
	)</i>
</code>
<br>
<br>
Set properties based on passed named arguments, making sure they are allowed to be set.
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>args:</b>
struct, optional, args 
<br>
&nbsp;&nbsp; <b>target:</b>
struct, optional, target 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_setPassword">setPassword</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>setPassword</b>
	(<i> required string</i>
	pass 
	)</i>
</code>
<br>
<br>
Method to set a firelogger password
<br>
<br>
Output: suppressed
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>pass:</b>
string, required, pass 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETTEXT">SETTEXT</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETTEXT</b>
	(<i> required string</i>
	text 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>text:</b>
string, required, text 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETTYPE">SETTYPE</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETTYPE</b>
	(<i> required string</i>
	type 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>type:</b>
string, required, type 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_SETVALUESALREADYSERIALIZED">SETVALUESALREADYSERIALIZED</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>void</i>
	<b>SETVALUESALREADYSERIALIZED</b>
	(<i> required boolean</i>
	valuesAlreadySerialized 
	)</i>
</code>
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>valuesAlreadySerialized:</b>
boolean, required, valuesAlreadySerialized 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_splitStrToArray">splitStrToArray</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>array</i>
	<b>splitStrToArray</b>
	(<i> string</i>
	data, <i> numeric</i>
	size="[runtime expression]" 
	)</i>
</code>
<br>
<br>
Splits a string into an array of strings of the specified size.
<br>
<br>
Output: suppressed
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>data:</b>
string, optional, data 
<br>
&nbsp;&nbsp; <b>size:</b>
numeric, optional, size 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_typeFL2CF">typeFL2CF</a>* 
</th>
</tr>
<tr>
<td>
	<code>
	<i>private</i>
	<i>string</i>
	<b>typeFL2CF</b>
	(<i> string</i>
	type 
	)</i>
</code>
<br>
<br>
Converts firelogger style logging types (severity levels) to CF types
<br>
<br>
Output: 
<br>
Parameters:
<br>
&nbsp;&nbsp; <b>type:</b>
string, optional, type 
<br>
<br></td>
</tr>
<tr>
<th align="left" colspan="1">
	<a name="method_warn">warn</a>
</th>
</tr>
<tr>
<td>
	<code>
	<i>public</i>
	<i>boolean</i>
	<b>warn</b>
	(
	)</i>
</code>
<br>
<br>
Warning type proxy function for log(). See docs for log().
<br>
<br>
Output: 
<br>
<br></td>
</tr>
</table>
</body>
</html>
